# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

variables:
  - group: Terraformvariables
pool:
  vmImage: ubuntu-latest

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - script: |
          git config --global url."https://oauth2:$(githubpat)@github.com/jagadish88t/Terraform-Modules.git".insteadOf "https://@github.com/jagadish88t/Terraform-Modules.git"
        displayName: 'Authenticate to Git for Terraform'
      - task: TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'

      - script: |
          cd '$(System.DefaultWorkingDirectory)/'
          ls *
        displayName: 'Check files before terraform init'
      - task: TerraformTaskV4@4
        displayName: 'Initialize terraform'
        inputs:
          provider: 'azurerm'
          command: 'init'
          commandOptions: '-migrate-state'
          workingDirectory: '$(System.DefaultWorkingDirectory)/'
          backendServiceArm: 'terraform-databricks'
          backendAzureRmResourceGroupName: 'Terraformfiles'
          backendAzureRmStorageAccountName: 'tfstatefileslearning'
          backendAzureRmContainerName: 'terraformstatefiles'
          backendAzureRmKey: 'databricksproject.tfstate'

      - script: |
          cd '$(System.DefaultWorkingDirectory)/'
          ls *
        displayName: 'Check files after terraform init'
      - task: TerraformTaskV4@4
        displayName: 'Terraform validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/'
      # - task: AzureCLI@2
      #   inputs:
      #     azureSubscription: 'terraform-databricks'
      #     scriptType: 'bash'
      #     scriptLocation: 'inlineScript'
      #     inlineScript: |
      #       aadtoken=`az account get-access-token --resource 2ff814a6-3304-4ab8-85cb-cd0e6f879c1d --query "accessToken" -o tsv`
      #       echo "##vso[task.setvariable variable=databricks_token;]$aadtoken"
      # - script: |
      #     echo $(databricks_token)
      #   displayName: 'Print AAD token'
      - task: TerraformTaskV4@4
        displayName: Terraform plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/'
          # commandOptions: '-var-file terraform.tfvars -var "databricks_aadtoken=$(databricks_token)"'
          commandOptions: '-var-file terraform.tfvars'
          # environmentServiceNameAzureRM: 'terraform-databricks'
          # backendAzureRmResourceGroupName: 'Terraformfiles'
          # backendAzureRmStorageAccountName: 'tfstatefileslearning'
          # backendAzureRmContainerName: 'terraformstatefiles'
          # backendAzureRmKey: 'databricksproject.tfstate'
          
      - script: |
          cd '$(System.DefaultWorkingDirectory)/'
          ls *
        displayName: 'Check files after terraform plan'
      
      # - task: TerraformTaskV4@4
      #   displayName: Terraform apply
      #   inputs:
      #     provider: 'azurerm'
      #     command: 'apply'
      #     workingDirectory: '$(System.DefaultWorkingDirectory)/'
      #     # commandOptions: '-auto-approve -var-file terraform.tfvars'
      #     commandOptions: '-var-file terraform.tfvars -var "databricks_aadtoken=$(databricks_token)"'
      #     # commandOptions: '-var-file dev.tfvars'
      #     environmentServiceNameAzureRM: 'terraform-databricks'
      #     backendAzureRmResourceGroupName: 'Terraformfiles'
      #     backendAzureRmStorageAccountName: 'tfstatefileslearning'
      #     backendAzureRmContainerName: 'terraformstatefiles'
      #     backendAzureRmKey: 'databricksproject.tfstate'